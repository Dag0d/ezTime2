#!/usr/local/bin/php

<?php

// Set PHP timezone based on the container's TZ environment variable
date_default_timezone_set(getenv('TZ') ?: 'UTC');

// Determine the base directory of the script
$base_dir = dirname(__FILE__);

// Read the UDP port from the environment variable or default to 2342
$udp_port = getenv('UDP_PORT') ?: 2342;

// Maximum UDP packet size
$max_packet_size = 1400;

// Reduce errors
// error_reporting(0);
// error_reporting(E_ALL & ~E_NOTICE);

$tz = array();

// Read posixinfo
$posixinfo_path = $base_dir . '/posixinfo';
if ($file = fopen($posixinfo_path, "r")) {
    while (!feof($file)) {
        $line = fgets($file);
        if (preg_match("/^(.*?) (.*?)$/", $line, $matches) && isset($matches[1], $matches[2])) {
            if ($matches[1] != "" && $matches[2] != "") {
                array_push($tz, array("olsen" => trim($matches[1]), "posix" => trim($matches[2])));
            }
        }
    }
    fclose($file);
}

// Read zone1970.tab
$zone1970_path = $base_dir . '/download/zone1970.tab';
if ($file = fopen($zone1970_path, "r")) {
    while (!feof($file)) {
        $line = fgets($file);
        if (!empty($line) && $line[0] != "#") {
            $columns = explode("\t", $line);
            if (count($columns) >= 3) {
                $countries = explode(",", $columns[0]);
                for ($n = 0; $n < count($countries); $n++) {
                    $country = trim($countries[$n]);
                    $insert_at = -1;
                    $posix = "";
                    for ($m = 0; $m < count($tz); $m++) {
                        if (trim($tz[$m]["olsen"]) == trim($columns[2])) {
                            $posix = $tz[$m]["posix"];
                            if (!isset($tz[$m]["country"])) {
                                $insert_at = $m;
                            }
                        }
                    }
                    if ($insert_at == -1) {
                        $insert_at = count($tz);
                        array_push($tz, array());
                    }
                    $tz[$insert_at]["country"] = $countries[$n];
                    $tz[$insert_at]["coordinates"] = $columns[1];
                    $tz[$insert_at]["olsen"] = trim($columns[2]);
                    if ($posix != "") $tz[$insert_at]["posix"] = $posix;
                    if (isset($columns[3])) $tz[$insert_at]["comments"] = $columns[3];
                }
            }
        }
    }
}

echo "Data read \n";

// Create a UDP socket
if (!($sock = socket_create(AF_INET, SOCK_DGRAM, 0))) {
    $errorcode = socket_last_error();
    $errormsg = socket_strerror($errorcode);
    die("Couldn't create socket: [$errorcode] $errormsg\n");
}

echo "Socket created \n";

// Bind the source address
if (!socket_bind($sock, "0.0.0.0", $udp_port)) {
    $errorcode = socket_last_error();
    $errormsg = socket_strerror($errorcode);
    die("Could not bind socket : [$errorcode] $errormsg\n");
}

echo "Socket bind OK on port $udp_port\n";

$last_ask = array();

// Process packets. This loop can handle multiple clients
while (1) {
    // Receive packet
    $r = socket_recvfrom($sock, $packet, 512, 0, $remote_ip, $remote_port);

    // DDoS/flood protection
    if (isset($last_ask[$remote_ip]) && $last_ask[$remote_ip] > time() - 3) continue;
    $last_ask[$remote_ip] = time();

    $query = trim($packet);
    $logstart = date("D, d M Y H:i:s") . "Z -- $remote_ip:$remote_port --";

    // Check for JSON file request
    if (preg_match('/^(.*?)\.json$/i', $query, $matches)) {
        $requested_file = strtolower($matches[1] . '.json');
        $dir_path = $base_dir . '/timezones/';

        // Find file case-insensitively
        $files = scandir($dir_path);
        $json_file_name = null;

        foreach ($files as $file) {
            if (strtolower($file) === $requested_file) {
                $json_file_name = $file;
                break;
            }
        }

        if ($json_file_name) {
            echo "$logstart Serving $json_file_name\n";
            $json_file_path = $dir_path . $json_file_name;
            $json_data = file_get_contents($json_file_path);

            // Split the response into smaller chunks with metadata
            $chunks = str_split($json_data, $max_packet_size - 50); // Reserve space for metadata
            $total_chunks = count($chunks);

            foreach ($chunks as $index => $chunk) {
                $metadata = json_encode([
                    'total' => $total_chunks,
                    'current' => $index + 1,
                ]);
                $packet = $metadata . "|" . $chunk;

                socket_sendto($sock, $packet, strlen($packet), 0, $remote_ip, $remote_port);
            }
        } else {
            echo "$logstart ERR JSON FILE NOT FOUND: $requested_file\n";
            socket_sendto($sock, "ERROR JSON File Not Found", 100, 0, $remote_ip, $remote_port);
        }
        continue;
    }

    // GeoIP ?
    if ($query == "GEOIP") {
        if (preg_match("/: ([A-Z][A-Z]),/", exec("geoiplookup " . $remote_ip), $matches)) {
            $query = $matches[1];
        } else {
            echo "$logstart ERR GeoIP Lookup Failed\n";
            socket_sendto($sock, "ERROR GeoIP Lookup Failed", 100, 0, $remote_ip, $remote_port);
            continue;
        }
    }

    if ($query == "UK") $query = "GB";
    if ($query == "DE") $query = "EUROPE/BERLIN";

    // If a two-letter country-code was provided
    if (preg_match('/^[A-Z][A-Z]$/', $query)) {
        // Convert to name of timezone if the country happens to have only one timezone
        $num_matches = 0;
        for ($m = 0; $m < count($tz); $m++) {
            if (isset($tz[$m]["country"]) && $tz[$m]["country"] == $query) {
                $num_matches++;
                $posix = $tz[$m]["posix"];
                $olsen = $tz[$m]["olsen"];
            }
        }
        switch ($num_matches) {
            case 0:
                echo "$logstart ERR COUNTRY NOT FOUND: $query\n";
                socket_sendto($sock, "ERROR Country Not Found", 100, 0, $remote_ip, $remote_port);
                break;
            case 1:
                echo "$logstart OK $query -> $olsen $posix\n";
                socket_sendto($sock, "OK " . $olsen . " " . $posix, 100, 0, $remote_ip, $remote_port);
                break;
            default:
                echo "$logstart ERR MULTIPLE TIMEZONES: $query\n";
                socket_sendto($sock, "ERROR Country Spans Multiple Timezones", 100, 0, $remote_ip, $remote_port);
                break;
        }
    } else {
        $num_matches = 0;
        for ($m = 0; $m < count($tz); $m++) {
            if (strpos(strtoupper($tz[$m]["olsen"]), strtoupper($query)) !== false) {
                $num_matches++;
                $posix = $tz[$m]["posix"];
                $olsen = $tz[$m]["olsen"];

                // Ireland has negative Summer Time as Winter time which messes things up
                // See https://github.com/ropg/ezTime/issues/65 if you must know.
                if ($olsen == "Europe/Dublin") $posix = "GMT0IST,M3.5.0/1,M10.5.0";

                echo "$logstart OK $query -> $olsen $posix\n";
                socket_sendto($sock, "OK " . $olsen . " " . $posix, 100, 0, $remote_ip, $remote_port);
                break;
            }
        }
        if (!$num_matches) {
            echo "$logstart ERR TIMEZONE NOT FOUND: $query\n";
            socket_sendto($sock, "ERROR Timezone Not Found", 100, 0, $remote_ip, $remote_port);
        }
    }
}